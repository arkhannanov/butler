const fs = require('fs');

const generateEmailList = (count) => {
    const names = [
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "–ò–≤–∞–Ω–æ–≤ –ò –ò", "–õ–∏ –¢—è–Ω",
        "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—è", "–í–∞—Å—è –ü–µ—Ç—Ä–æ–≤", "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –§—Ä–æ–ª–æ–≤–∞", "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "–ü–∞–≤–µ–ª –ó–∞—Ö–∞—Ä–æ–≤", "–°–µ—Ä–≥–µ–π –û—Ä–ª–æ–≤",
        "–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ù–∏–∫–æ–ª–∞–π –ß–µ—Ä–Ω–æ–≤", "–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞",
        "–ì—Ä–∏–≥–æ—Ä–∏–π –ö–æ—Ç–æ–≤", "–í–µ—Ä–æ–Ω–∏–∫–∞ –°–µ—Ä–≥–µ–µ–≤–∞", "–û–ª–µ–≥ –ö–Ω—è–∑–µ–≤",
        "–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤", "–¢–∞—Ç—å—è–Ω–∞ –ì—Ä–æ–º–æ–≤–∞", "–ê—Ä—Ç—É—Ä –ú–æ—Ä–æ–∑–æ–≤"
    ];

    const emails = [];

    for (let i = 0; i < count; i++) {
        const hasName = Math.random() > 0.5;
        const fio = hasName ? names[Math.floor(Math.random() * names.length)] : "";
        emails.push({ fio: fio, email: `example${i + 1}@email.com` });
    }

    return emails;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ email'–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadEmails() {
    try {
        const data = fs.readFileSync('emails.json', 'utf8');
        console.log('Email list loaded from file.');
        return JSON.parse(data);
    } catch (err) {
        console.log('No existing email list found, generating a new one.');
        return null;
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email'–æ–≤ –≤ —Ñ–∞–π–ª
function saveEmails(emails) {
    fs.writeFileSync('emails.json', JSON.stringify(emails, null, 2), 'utf8');
    console.log('Email list saved to file.');
}

async function sendEmail(email, name) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (Math.floor(Math.random() * 10) > 0) {
                console.log(`–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
                resolve(Math.floor(Math.random() * 100000));
            } else {
                console.error(`–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
                reject(new Error('–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'));
            }
        }, Math.floor(Math.random() * (2000 - 100) + 100));
    });
}

function loadSentEmails() {
    try {
        const data = fs.readFileSync('sentEmails.json', 'utf8');
        console.log('Sent email list loaded from file.');
        return new Set(JSON.parse(data));
    } catch (err) {
        console.log('No existing sent email list found, starting fresh.');
        return new Set();
    }
}

function saveSentEmails(emailsSet) {
    fs.writeFileSync('sentEmails.json', JSON.stringify(Array.from(emailsSet), null, 2), 'utf8');
    console.log('Sent email list saved to file.');
}

async function main() {
    let emails = loadEmails(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ email'—ã –∏–∑ —Ñ–∞–π–ª–∞

    if (!emails) {
        emails = generateEmailList(130); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email'—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
        saveEmails(emails); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ email'—ã
    }

    const successfullySentEmails = loadSentEmails();

    if (successfullySentEmails.size === emails.length) {
        console.log('–ù–µ—Ç —Å–º—ã—Å–ª–∞ –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. üòä');
        return;
    }

    const results = [];
    let index = 0;

    while (index < emails.length) {
        const batch = emails.slice(index, index + 60);
        const batchPromises = batch.map(async ({ fio, email }) => {
            if (successfullySentEmails.has(email)) {
                return { email, status: '—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
            }
            try {
                const name = fio || '–∫–ª–∏–µ–Ω—Ç';
                await sendEmail(email, name);
                successfullySentEmails.add(email);
                return { email, status: '—É—Å–ø–µ—Ö' };
            } catch (error) {
                return { email, status: '–æ—à–∏–±–∫–∞' };
            }
        });

        const batchResults = await Promise.all(batchPromises);
        results.push(...batchResults);

        index += 60;

        if (index < emails.length) {
            await new Promise(resolve => setTimeout(resolve, 60000)); // –ñ–¥–µ–º –º–∏–Ω—É—Ç—É
        }
    }

    saveSentEmails(successfullySentEmails);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:', results);

    if (successfullySentEmails.size === emails.length) {
        console.log("–≠—Ç–æ –£—Å–ø–µ—Ö! –ù–∞ –≤—Å–µ email'—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–∏—Å—å–º–∞ üéâ");
    }
}

main().catch(console.error);
