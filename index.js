const fs = require('fs');

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ email'–æ–≤
const generateEmailList = (count) => {
    const names = [
        "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "–ò–≤–∞–Ω–æ–≤ –ò –ò", "–õ–∏ –¢—è–Ω",
        "–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—è", "–í–∞—Å—è –ü–µ—Ç—Ä–æ–≤", "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤",
        "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –§—Ä–æ–ª–æ–≤–∞", "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞", "–ü–∞–≤–µ–ª –ó–∞—Ö–∞—Ä–æ–≤", "–°–µ—Ä–≥–µ–π –û—Ä–ª–æ–≤",
        "–û–ª—å–≥–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ù–∏–∫–æ–ª–∞–π –ß–µ—Ä–Ω–æ–≤", "–ï–ª–µ–Ω–∞ –°–æ–∫–æ–ª–æ–≤–∞",
        "–ì—Ä–∏–≥–æ—Ä–∏–π –ö–æ—Ç–æ–≤", "–í–µ—Ä–æ–Ω–∏–∫–∞ –°–µ—Ä–≥–µ–µ–≤–∞", "–û–ª–µ–≥ –ö–Ω—è–∑–µ–≤",
        "–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤", "–¢–∞—Ç—å—è–Ω–∞ –ì—Ä–æ–º–æ–≤–∞", "–ê—Ä—Ç—É—Ä –ú–æ—Ä–æ–∑–æ–≤"
    ];

    const emails = [];

    for (let i = 0; i < count; i++) {
        const hasName = Math.random() > 0.5;
        const fio = hasName ? names[Math.floor(Math.random() * names.length)] : "";
        emails.push({ fio: fio, email: `example${i + 1}@email.com` });
    }

    return emails;
};

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ email'–æ–≤ –≤ —Ñ–∞–π–ª
function saveEmails(emails) {
    fs.writeFileSync('emails.json', JSON.stringify(emails, null, 2), 'utf8');
    console.log('Email list saved to file.');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ email'–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function loadEmails() {
    try {
        const data = fs.readFileSync('emails.json', 'utf8');
        console.log('Email list loaded from file.');
        return JSON.parse(data);
    } catch (err) {
        console.log('No existing email list found, generating a new one.');
        return null;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
function loadSentEmails() {
    try {
        const data = fs.readFileSync('sentEmails.json', 'utf8');
        console.log('Sent email list loaded from file.');
        return new Set(JSON.parse(data));
    } catch (err) {
        console.log('No existing sent email list found, starting fresh.');
        return new Set();
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
function saveSentEmails(emailsSet) {
    fs.writeFileSync('sentEmails.json', JSON.stringify(Array.from(emailsSet), null, 2), 'utf8');
    console.log('Sent email list saved to file.');
}

// –§—É–Ω–∫—Ü–∏—è "–æ—Ç–ø—Ä–∞–≤–∫–∏" –ø–∏—Å—å–º–∞
async function sendEmail(email, name) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (Math.floor(Math.random() * 10) > 0) {
                console.log(`–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
                resolve(Math.floor(Math.random() * 100000)); // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            } else {
                console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ ${email}`);
                reject(new Error('–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')); // –û—à–∏–±–∫–∞
            }
        }, Math.floor(Math.random() * (2000 - 100) + 100)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    });
}

// –§—É–Ω–∫—Ü–∏—è-–æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –±–æ–ª–µ–µ 10 –ø–∏—Å–µ–º –≤ 10 —Å–µ–∫—É–Ω–¥
async function processEmailsWithLimit(emails, successfullySentEmails) {
    const results = [];
    const batchSize = 10; // –ú–∞–∫—Å–∏–º—É–º 10 –ø–∏—Å–µ–º –∑–∞ —Ä–∞–∑
    const delay = 10000; // 10 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏

    for (let i = 0; i < emails.length; i += batchSize) {
        const batch = emails.slice(i, i + batchSize);
        const batchPromises = batch.map(async ({ fio, email }) => {
            if (successfullySentEmails.has(email)) {
                return { email, status: '—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' };
            }
            try {
                const name = fio || '–∫–ª–∏–µ–Ω—Ç';
                await sendEmail(email, name);
                successfullySentEmails.add(email);
                return { email, status: '—É—Å–ø–µ—Ö' };
            } catch (error) {
                return { email, status: '–æ—à–∏–±–∫–∞' };
            }
        });

        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏
        const batchResults = await Promise.all(batchPromises);
        results.push(...batchResults);

        // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –ø–∏—Å—å–º–∞, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–∏
        if (i + batchSize < emails.length) {
            console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${delay / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—Ç–∏–µ–π...`);
            await new Promise(resolve => setTimeout(resolve, delay));
        }
    }

    return results;
}

async function main() {
    let emails = loadEmails(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ email'–æ–≤

    if (!emails) {
        emails = generateEmailList(45); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º email'—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        saveEmails(emails); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    }

    const successfullySentEmails = loadSentEmails(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ email'—ã

    // –ï—Å–ª–∏ –≤—Å–µ –ø–∏—Å—å–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    if (successfullySentEmails.size === emails.length) {
        console.log('–í—Å–µ –ø–∏—Å—å–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. üòä');
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–∞ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const results = await processEmailsWithLimit(emails, successfullySentEmails);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email'–æ–≤
    saveSentEmails(successfullySentEmails);

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏:', results);

    if (successfullySentEmails.size === emails.length) {
        console.log("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –ø–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üéâ");
    }
}

main().catch(console.error);
